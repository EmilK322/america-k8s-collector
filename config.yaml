resources: # List of K8s resources to list, watch, and export to Port.
  - apiVersion: v1
    kind: ConfigMap
    selector:
      query: "!starts_with(metadata.namespace, 'kube') && !starts_with(metadata.name, 'kube')" # jmespath boolean query. If evaluated to false - skip syncing the object.
    entity:
      mappings: # Mappings between one K8s object to one or many Port Entities. Each value is a jmespath query.
        - identifier: "metadata.name"
          title: "metadata.name"
          blueprint: "`ConfigMap`"
          team: "metadata.labels.responsibleTeam || `Liberty`"
          properties:
            config1: "data.key1"
            config2: "data.key2"
            creationTimestamp: "metadata.creationTimestamp"
            annotations: "metadata.annotations"
            isStale: false
            status: "status"
    sinks:
      - type: "http"
        url: 'http://127.0.0.1:8888/first'
        headers:
          - key: "asd"
            value: "6"
          - key: "secret-key-header"
            # can use env vars using string.Format like syntax and "env__" prefix.
            # e.g: "{env__<ENV_VAR_IN_UPPER_CASE>}"
            value: "{env__SECRET_KEY_ENV_VAR}"

  - apiVersion: v1
    kind: Secret
    selector:
      query: "!starts_with(metadata.namespace, 'kube') && !starts_with(metadata.name, 'kube') && type=='Opaque'" # jmespath boolean query. If evaluated to false - skip syncing the object.
    entity:
      mappings: # Mappings between one K8s object to one or many Port Entities. Each value is a jmespath query.
        - identifier: "metadata.name"
          title: "metadata.name"
          blueprint: "`Secret`"
          team: "metadata.labels.responsibleTeam || `Liberty`"
          properties:
            username: "data.username"
            password: "data.password"
            creationTimestamp: "metadata.creationTimestamp"
            annotations: "metadata.annotations"
            status: "status"
    sinks:
      - type: "http"
        url: 'http://127.0.0.1:8888/second'
        headers:
          - key: "asd2"
            value: "2"
      - type: "console"
        format: "print obj for {event}, obj: {obj}"